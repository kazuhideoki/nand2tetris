//// „Åì„ÅÆ„É¢„Ç∏„É•„Éº„É´„ÅØ„ÄÅP a r s e r „Å´„Çà„Å£„Å¶Ëß£Êûê„Åï„Çå„ÅüVM„Ç≥„Éº„Éâ„ÇíH a c k „Ç¢„Çª„É≥„Éñ„É™ „Ç≥„Éº„Éâ„Å∏„Å®Â§âÊèõ„Åô„Çã

import gleam/int
import gleam/io
import gleam/list
import gleam/option.{None, Some}
import parser.{type CommandType, CArithmetic, CPop, CPush, Constant}
import segment_store.{type SegmentStore}

pub fn generate_first_lines(segment_store: SegmentStore) -> List(String) {
  let option_sp = segment_store.get(segment_store, "SP")
  case option_sp {
    Some(sp) -> {
      // SP „ÅÆÂàùÊúüÂåñ
      ["@" <> int.to_string(sp), "D=A", "@SP", "M=D"]
    }
    None -> panic
  }
}

pub fn generate_last_lines() {
  ["(END)", "@END", "0;JMP"]
}

/// ÁÆóË°ìË´ñÁêÜ„Ç≥„Éû„É≥„Éâ„ÅÆ command „Å´ÂØæÂøú„Åô„Çã„Ç¢„Çª„É≥„Éñ„É™„Ç≥„Éº„Éâ„ÇíÂá∫Âäõ„Éï„Ç°„Ç§„É´„Å´Êõ∏„ÅçËæº„ÇÄ„ÄÇ
/// ‰∏ÄÊÑè„Å™„É©„Éô„É´„ÇíÁîüÊàê„Åô„Çã„Åü„ÇÅ„Å´„ÄÅlabel_counter „ÇíÂºïÊï∞„Å´Âèñ„Çã„ÄÇ
pub fn write_arithmetic(
  command_type: CommandType,
  label_counter: Int,
) -> #(List(String), Int) {
  case command_type {
    CArithmetic(value) ->
      case value {
        // „Éù„Ç§„É≥„ÇøÂèñÂæó -> „Çπ„Çø„ÉÉ„ÇØÊúÄ‰∏äÊÆµ„ÅÆÂÄ§ÂèñÂæó -> D„Å´Ê†ºÁ¥ç -> „Çπ„Çø„ÉÉ„ÇØ„ÅÆ„ÇÇ„ÅÜ‰∏ÄÊÆµ‰∏ã„ÅÆÂÄ§ÂèñÂæó -> D„ÇíÂä†ÁÆó„Åó„Å¶Âêå„Åò‰ΩçÁΩÆ„Å´Ê†ºÁ¥ç
        "add" -> #(
          ["@SP", "AM=M-1", "D=M", "A=A-1", "M=M+D"],
          label_counter + 1,
        )
        "sub" -> #(
          ["@SP", "AM=M-1", "D=M", "A=A-1", "M=M-D"],
          label_counter + 1,
        )
        "eq" -> {
          let eq_true_label = "EQ_TRUE_" <> int.to_string(label_counter)
          let eq_end_label = "EQ_END_" <> int.to_string(label_counter)
          // Â∑Æ„ÇíË®àÁÆó„Åô„Çã
          #(
            ["@SP", "AM=M-1", "D=M", "A=A-1", "D=M-D"]
              // 0 „Å™„Çâ true(-1), „Åù„Çå‰ª•Â§ñ„Å™„Çâ false(0)
              |> list.append([
                "@" <> eq_true_label,
                "D;JEQ",
                "@SP",
                "A=M-1",
                "M=0",
                "@" <> eq_end_label,
                "0;JMP",
                "(" <> eq_true_label <> ")",
                "@SP",
                "A=M-1",
                "M=-1",
                "(" <> eq_end_label <> ")",
              ]),
            label_counter + 1,
          )
        }
        "lt" -> {
          let lt_true_label = "LT_TRUE_" <> int.to_string(label_counter)
          let lt_end_label = "LT_END_" <> int.to_string(label_counter)
          #(
            ["@SP", "AM=M-1", "D=M", "A=A-1", "D=M-D"]
              |> list.append([
                "@" <> lt_true_label,
                "D;JLT",
                "@SP",
                "A=M-1",
                "M=0",
                "@" <> lt_end_label,
                "0;JMP",
                "(" <> lt_true_label <> ")",
                "@SP",
                "A=M-1",
                "M=-1",
                "(" <> lt_end_label <> ")",
              ]),
            label_counter + 1,
          )
        }
        "gt" -> {
          let gt_true_label = "GT_TRUE_" <> int.to_string(label_counter)
          let gt_end_label = "GT_END_" <> int.to_string(label_counter)
          #(
            ["@SP", "AM=M-1", "D=M", "A=A-1", "D=M-D"]
              |> list.append([
                "@" <> gt_true_label,
                "D;JGT",
                "@SP",
                "A=M-1",
                "M=0",
                "@" <> gt_end_label,
                "0;JMP",
                "(" <> gt_true_label <> ")",
                "@SP",
                "A=M-1",
                "M=-1",
                "(" <> gt_end_label <> ")",
              ]),
            label_counter + 1,
          )
        }
        // "neg" -> #(["@SP", "AM=M-1", "M=-M"], label_counter)
        // SP„Éá„ÇØ„É™„É°„É≥„Éà„Åõ„Åö„Å´„ÄÅ„Åù„ÅÆ„Ç¢„Éâ„É¨„Çπ„ÅÆÂÄ§„ÇíÂèçËª¢„Åô„Çã„Å†„Åë
        "neg" -> #(["@SP", "A=M-1", "M=-M"], label_counter)
        "and" -> #(["@SP", "AM=M-1", "D=M", "A=A-1", "M=M&D"], label_counter)
        "or" -> #(["@SP", "AM=M-1", "D=M", "A=A-1", "M=M|D"], label_counter)
        "not" -> #(["@SP", "A=M-1", "M=!M"], label_counter)
        _ -> panic
      }
    _ -> panic
  }
}

/// push„Åæ„Åü„ÅØpop„ÅÆ command „Å´ÂØæÂøú„Åô„Çã„Ç¢„Çª„É≥„Éñ„É™„Ç≥„Éº„Éâ„ÇíÂá∫Âäõ„Éï„Ç°„Ç§„É´„Å´Êõ∏„ÅçËæº„ÇÄ„ÄÇ
pub fn write_push_pop(
  command_type: CommandType,
  segment_store: SegmentStore,
) -> List(String) {
  case command_type {
    CPush(segment, index) -> {
      let segment_code = generate_by_segment(segment, index, segment_store)
      case segment {
        Constant ->
          segment_code
          |> list.append(["@SP", "A=M", "M=D", "@SP", "M=M+1"])
        _ -> panic
        // ÂøÖË¶Å„Å™ÂÆüË£Ö„ÇíËøΩÂä†
      }
    }
    CPop(segment, index) -> {
      let segment_code = generate_by_segment(segment, index, segment_store)
      // üî∂ TODO ‰∏çÂÆåÂÖ®„Å™„ÅÆ„Åß‰øÆÊ≠£
      case segment {
        Constant ->
          segment_code |> list.append(["@SP", "A=M", "M=D", "@SP", "M=M-1"])
        _ -> panic
        // ÂøÖË¶Å„Å™ÂÆüË£Ö„ÇíËøΩÂä†
      }
    }
    _ -> {
      io.println_error("not implemented")
      panic
    }
  }
}

/// üî∂ TODO constant ÊÑèÂ§ñ„Å´„ÇÇÂØæÂøú„Åô„Çã
/// constant(ÁèæÁä∂)„Å´Âä†„Åà„ÄÅlocal, argument, this, that, temp
fn generate_by_segment(
  segment: parser.Segment,
  index: Int,
  segment_store: SegmentStore,
) -> List(String) {
  case segment {
    Constant -> ["@" <> int.to_string(index), "D=A"]
    _ -> panic
  }
}
